import org.codehaus.groovy.runtime.GStringImpl

plugins {
    id 'java'
    id 'java-library'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id "io.mateo.cxf-codegen" version "1.2.1"
}

group = 'com.csullagrita'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    wsimport
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2022.0.4")
}

dependencies {
    //rest hivas openfeign-el
//    implementation project(':catalog-service')
//    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.4'

    //    mapper
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    implementation 'org.springframework.boot:spring-boot-starter-artemis'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    compileOnly 'org.projectlombok:lombok'

    //db
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'

    //jaxws
    implementation 'com.sun.xml.ws:jaxws-ri:4.0.1'
    wsimport "com.sun.xml.ws:jaxws-tools:4.0.1"
    //jaxB and its friends, imports would be great with this
    implementation "com.sun.xml.ws:jaxws-rt:4.0.1"
    implementation "javax.xml.ws:jaxws-api:2.3.1"
    implementation 'org.apache.cxf:cxf-spring-boot-starter-jaxws:4.0.2'

    //ActiveMQ server-side
    implementation 'org.springframework.boot:spring-boot-starter-artemis:3.1.1'
    implementation 'org.apache.activemq:activemq-kahadb-store:5.18.2'
    implementation 'org.apache.activemq:artemis-jakarta-server:2.29.0'


    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

//xml-ws

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', "${buildDir}/wsdl"]
        }
    }
}

ext {
    generatedDir = "${buildDir}/wsdl" as GStringImpl
    generatedSourcesDir = "${generatedDir}/java" as GStringImpl
}

tasks.register('generateSources') {
    ext.wsdlFile = "http://localhost:8084/services/shipment?wsdl"
    ext.wsdlLocation = "http://localhost:8084/services/shipment?wsdl"
    ext.bindingDir = "${projectDir}/src/main/java/com/csullag/orderservice/wsdl"

    doLast {
        ant {
            taskdef name: "wsimport",
                    classname: "com.sun.tools.ws.ant.WsImport",
                    classpath: configurations.wsimport.asPath

            mkdir(dir: generatedSourcesDir)

            wsimport(sourcedestdir: generatedSourcesDir,
                    wsdl: wsdlFile,
                    wsdlLocation: wsdlLocation,
                    keep: true,
                    xnocompile: true) {
                binding(dir: bindingDir, includes: "*.xml")
            }
        }
    }
}


tasks.register('cleanGenerated', Delete) {
    delete generatedDir
}

clean.dependsOn cleanGenerated

compileJava {
    dependsOn generateSources
    source generatedSourcesDir
}
